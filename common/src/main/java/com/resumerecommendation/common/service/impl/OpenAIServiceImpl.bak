package com.resumerecommendation.common.service.impl;

import com.resumerecommendation.common.entity.Resume;
import com.resumerecommendation.common.entity.JobPosition;
import com.resumerecommendation.common.service.AIService;
import com.theokanning.openai.completion.chat.ChatCompletionRequest;
import com.theokanning.openai.completion.chat.ChatMessage;
import com.theokanning.openai.service.OpenAiService;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import java.util.*;

@Slf4j
@Service
public class OpenAIServiceImpl implements AIService {

    @Value("${openai.api.key}")
    private String apiKey;

    private OpenAiService openAiService;

    private static final String MODEL = "gpt-4";

    private OpenAiService getOpenAiService() {
        if (openAiService == null) {
            openAiService = new OpenAiService(apiKey);
        }
        return openAiService;
    }

    @Override
    public Map<String, Object> analyzeResume(Resume resume) {
        String prompt = String.format("""
            分析以下简历内容，提供详细的分析报告：
            
            个人信息：
            姓名：%s
            教育背景：%s
            
            工作经验：
            %s
            
            技能：
            %s
            
            请提供以下方面的分析：
            1. 职业发展轨迹
            2. 核心竞争力
            3. 技能评估
            4. 经验水平
            5. 改进建议
            """,
            resume.getName(),
            resume.getEducation(),
            formatWorkExperience(resume),
            String.join(", ", resume.getSkills())
        );

        String response = callGPT(prompt);
        return parseAnalysisResponse(response);
    }

    @Override
    public List<String> extractSkills(String content) {
        String prompt = "从以下文本中提取所有技术技能、软技能和专业技能，按类别分类：\n\n" +
            content + "\n\n" +
            "请以JSON格式返回，格式如下：\n" +
            "{\n" +
            "    \"technical_skills\": [],\n" +
            "    \"soft_skills\": [],\n" +
            "    \"professional_skills\": []\n" +
            "}";

        String response = callGPT(prompt);
        return parseSkillsResponse(response);
    }

    @Override
    public Map<String, Integer> assessSkillLevels(String content, List<String> skills) {
        String prompt = String.format("""
            基于以下内容，评估列出技能的熟练度（1-5分）：
            
            内容：
            %s
            
            技能列表：
            %s
            
            请以JSON格式返回评分，并说明评分依据。
            """, content, String.join(", ", skills));

        String response = callGPT(prompt);
        return parseSkillLevelsResponse(response);
    }

    @Override
    public String generateImprovementSuggestions(Resume resume) {
        String prompt = String.format("""
            基于以下简历信息，提供具体的改进建议：
            
            教育背景：%s
            工作经验：%s
            技能：%s
            
            请从以下方面提供建议：
            1. 内容展示
            2. 技能提升
            3. 经验描述
            4. 职业规划
            """,
            resume.getEducation(),
            formatWorkExperience(resume),
            String.join(", ", resume.getSkills())
        );

        return callGPT(prompt);
    }

    @Override
    public Map<String, Object> calculateMatchScore(Resume resume, JobPosition jobPosition) {
        String prompt = String.format("""
            比较以下简历和职位要求的匹配程度：
            
            简历信息：
            教育：%s
            工作经验：%s
            技能：%s
            
            职位要求：
            职位：%s
            公司：%s
            要求技能：%s
            教育要求：%s
            经验要求：%d年
            
            请从以下维度评分（0-100）并说明原因：
            1. 技能匹配度
            2. 经验匹配度
            3. 教育匹配度
            4. 整体匹配度
            """,
            resume.getEducation(),
            formatWorkExperience(resume),
            String.join(", ", resume.getSkills()),
            jobPosition.getTitle(),
            jobPosition.getCompany(),
            String.join(", ", jobPosition.getRequiredSkills()),
            jobPosition.getEducationRequirement(),
            jobPosition.getExperienceYears()
        );

        String response = callGPT(prompt);
        return parseMatchScoreResponse(response);
    }

    @Override
    public String generateMatchAnalysis(Resume resume, JobPosition jobPosition, Map<String, Object> matchResults) {
        String prompt = String.format("""
            基于以下匹配结果，生成详细的分析报告：
            
            匹配得分：
            %s
            
            请提供：
            1. 优势分析
            2. 不足分析
            3. 改进建议
            4. 竞争力评估
            """, formatMatchResults(matchResults));

        return callGPT(prompt);
    }

    @Override
    public String generateTargetedSuggestions(Resume resume, JobPosition targetPosition) {
        String prompt = String.format("""
            基于简历信息和目标职位，提供针对性的优化建议：
            
            简历技能：%s
            目标职位：%s
            职位要求技能：%s
            
            请提供：
            1. 需要强化的技能
            2. 需要补充的经验
            3. 简历描述优化建议
            4. 面试准备建议
            """,
            String.join(", ", resume.getSkills()),
            targetPosition.getTitle(),
            String.join(", ", targetPosition.getRequiredSkills())
        );

        return callGPT(prompt);
    }

    private String callGPT(String prompt) {
        List<ChatMessage> messages = new ArrayList<>();
        messages.add(new ChatMessage("system", "你是一个专业的人力资源专家和职业顾问，擅长简历分析和职业规划。"));
        messages.add(new ChatMessage("user", prompt));

        ChatCompletionRequest request = ChatCompletionRequest.builder()
                .model(MODEL)
                .messages(messages)
                .temperature(0.7)
                .build();

        try {
            return getOpenAiService().createChatCompletion(request)
                    .getChoices().get(0).getMessage().getContent();
        } catch (Exception e) {
            log.error("调用 OpenAI API 失败", e);
            throw new RuntimeException("AI 服务暂时不可用");
        }
    }

    private String formatWorkExperience(Resume resume) {
        StringBuilder sb = new StringBuilder();
        resume.getWorkExperiences().forEach(exp -> {
            sb.append(String.format("""
                公司：%s
                职位：%s
                时间：%s 至 %s
                描述：%s
                
                """,
                exp.getCompany(),
                exp.getPosition(),
                exp.getStartDate(),
                exp.getEndDate(),
                exp.getDescription()
            ));
        });
        return sb.toString();
    }

    private Map<String, Object> parseAnalysisResponse(String response) {
        // 实现解析逻辑
        return new HashMap<>();
    }

    private List<String> parseSkillsResponse(String response) {
        // 实现解析逻辑
        return new ArrayList<>();
    }

    private Map<String, Integer> parseSkillLevelsResponse(String response) {
        // 实现解析逻辑
        return new HashMap<>();
    }

    private Map<String, Object> parseMatchScoreResponse(String response) {
        // 实现解析逻辑
        return new HashMap<>();
    }

    private String formatMatchResults(Map<String, Object> matchResults) {
        // 实现格式化逻辑
        return "";
    }
}